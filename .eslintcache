[{"/Users/rhok/postagram/src/index.js":"1","/Users/rhok/postagram/src/App.js":"2","/Users/rhok/postagram/src/aws-exports.js":"3","/Users/rhok/postagram/src/reportWebVitals.js":"4","/Users/rhok/postagram/src/Post.js":"5","/Users/rhok/postagram/src/graphql/queries.js":"6","/Users/rhok/postagram/src/Posts.js":"7","/Users/rhok/postagram/src/Header.js":"8","/Users/rhok/postagram/src/CreatePost.js":"9","/Users/rhok/postagram/src/Button.js":"10","/Users/rhok/postagram/src/graphql/mutations.js":"11"},{"size":597,"mtime":1611617653977,"results":"12","hashOfConfig":"13"},{"size":2321,"mtime":1611619438865,"results":"14","hashOfConfig":"13"},{"size":873,"mtime":1611618785023,"results":"15","hashOfConfig":"13"},{"size":362,"mtime":1611612920436,"results":"16","hashOfConfig":"13"},{"size":1335,"mtime":1611619129791,"results":"17","hashOfConfig":"13"},{"size":654,"mtime":1611617263498,"results":"18","hashOfConfig":"13"},{"size":910,"mtime":1611619103309,"results":"19","hashOfConfig":"13"},{"size":571,"mtime":1611619088057,"results":"20","hashOfConfig":"13"},{"size":3573,"mtime":1611619118663,"results":"21","hashOfConfig":"13"},{"size":538,"mtime":1611619080498,"results":"22","hashOfConfig":"13"},{"size":997,"mtime":1611617263522,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"67egiy",{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"26"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"26"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/rhok/postagram/src/index.js",[],["49","50"],"/Users/rhok/postagram/src/App.js",["51","52"],"/Users/rhok/postagram/src/aws-exports.js",[],"/Users/rhok/postagram/src/reportWebVitals.js",[],"/Users/rhok/postagram/src/Post.js",["53"],"import React, { useState, useEffect } from 'react'\nimport { css } from 'emotion';\nimport { useParams } from 'react-router-dom';\nimport { API, Storage } from 'aws-amplify';\nimport { getPost } from './graphql/queries';\n\nexport default function Post() {\n  const [loading, updateLoading] = useState(true);\n  const [post, updatePost] = useState(null);\n  const { id } = useParams()\n  useEffect(() => {\n    fetchPost()\n  }, [])\n  async function fetchPost() {\n    try {\n      const postData = await API.graphql({\n        query: getPost, variables: { id }\n      });\n      const currentPost = postData.data.getPost\n      const image = await Storage.get(currentPost.image);\n\n      currentPost.image = image;\n      updatePost(currentPost);\n      updateLoading(false);\n    } catch (err) {\n      console.log('error: ', err)\n    }\n  }\n  if (loading) return <h3>Loading...</h3>\n  console.log('post: ', post)\n  return (\n    <>\n      <h1 className={titleStyle}>{post.name}</h1>\n      <h3 className={locationStyle}>{post.location}</h3>\n      <p>{post.description}</p>\n      <img alt=\"post\" src={post.image} className={imageStyle} />\n    </>\n  )\n}\n\nconst titleStyle = css`\n  margin-bottom: 7px;\n`\n\nconst locationStyle = css`\n  color: #0070f3;\n  margin: 0;\n`\n\nconst imageStyle = css`\n  max-width: 500px;\n  @media (max-width: 500px) {\n    width: 100%;\n  }\n`","/Users/rhok/postagram/src/graphql/queries.js",[],"/Users/rhok/postagram/src/Posts.js",[],"/Users/rhok/postagram/src/Header.js",[],"/Users/rhok/postagram/src/CreatePost.js",["54"],"import React, { useState } from 'react';\nimport { css } from 'emotion';\nimport Button from './Button';\nimport { v4 as uuid } from 'uuid';\nimport { Storage, API, Auth } from 'aws-amplify';\nimport { createPost } from './graphql/mutations';\n\n/* Initial state to hold form input, saving state */\nconst initialState = {\n  name: '',\n  description: '',\n  image: {},\n  file: '',\n  location: '',\n  saving: false\n};\n\nexport default function CreatePost({\n  updateOverlayVisibility, updatePosts, posts\n}) {\n  /* 1. Create local state with useState hook */\n  const [formState, updateFormState] = useState(initialState)\n\n  /* 2. onChangeText handler updates the form state when a user types into a form field */\n  function onChangeText(e) {\n    e.persist();\n    updateFormState(currentState => ({ ...currentState, [e.target.name]: e.target.value }));\n  }\n\n  /* 3. onChangeFile handler will be fired when a user uploads a file  */\n  function onChangeFile(e) {\n    e.persist();\n    if (! e.target.files[0]) return;\n    const image = { fileInfo: e.target.files[0], name: `${e.target.files[0].name}_${uuid()}`}\n    updateFormState(currentState => ({ ...currentState, file: URL.createObjectURL(e.target.files[0]), image }))\n  }\n\n  /* 4. Save the post  */\n  async function save() {\n    try {\n      const { name, description, location, image } = formState;\n      if (!name || !description || !location || !image.name) return;\n      updateFormState(currentState => ({ ...currentState, saving: true }));\n      const postId = uuid();\n      const postInfo = { name, description, location, image: formState.image.name, id: postId };\n\n      await Storage.put(formState.image.name, formState.image.fileInfo);\n      await API.graphql({\n        query: createPost, variables: { input: postInfo }\n      });\n      updatePosts([...posts, { ...postInfo, image: formState.file }]);\n      updateFormState(currentState => ({ ...currentState, saving: false }));\n      updateOverlayVisibility(false);\n    } catch (err) {\n      console.log('error: ', err);\n    }\n  }\n\n  return (\n    <div className={containerStyle}>\n      <input\n        placeholder=\"Post name\"\n        name=\"name\"\n        className={inputStyle}\n        onChange={onChangeText}\n      />\n      <input\n        placeholder=\"Location\"\n        name=\"location\"\n        className={inputStyle}\n        onChange={onChangeText}\n      />\n      <input\n        placeholder=\"Description\"\n        name=\"description\"\n        className={inputStyle}\n        onChange={onChangeText}\n      />\n      <input \n        type=\"file\"\n        onChange={onChangeFile}\n      />\n      { formState.file && <img className={imageStyle} alt=\"preview\" src={formState.file} /> }\n      <Button title=\"Create New Post\" onClick={save} />\n      <Button type=\"cancel\" title=\"Cancel\" onClick={() => updateOverlayVisibility(false)} />\n      { formState.saving && <p className={savingMessageStyle}>Saving post...</p> }\n    </div>\n  )\n}\n\nconst inputStyle = css`\n  margin-bottom: 10px;\n  outline: none;\n  padding: 7px;\n  border: 1px solid #ddd;\n  font-size: 16px;\n  border-radius: 4px;\n`\n\nconst imageStyle = css`\n  height: 120px;\n  margin: 10px 0px;\n  object-fit: contain;\n`\n\nconst containerStyle = css`\n  display: flex;\n  flex-direction: column;\n  width: 400px;\n  height: 420px;\n  position: fixed;\n  left: 0;\n  border-radius: 4px;\n  top: 0;\n  margin-left: calc(50vw - 220px);\n  margin-top: calc(50vh - 230px);\n  background-color: white;\n  border: 1px solid #ddd;\n  box-shadow: rgba(0, 0, 0, 0.25) 0px 0.125rem 0.25rem;\n  padding: 20px;\n`\n\nconst savingMessageStyle = css`\n  margin-bottom: 0px;\n`","/Users/rhok/postagram/src/Button.js",[],"/Users/rhok/postagram/src/graphql/mutations.js",[],{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","severity":1,"message":"60","line":9,"column":24,"nodeType":"61","messageId":"62","endLine":9,"endColumn":28},{"ruleId":"63","severity":1,"message":"64","line":26,"column":6,"nodeType":"65","endLine":26,"endColumn":8,"suggestions":"66"},{"ruleId":"63","severity":1,"message":"67","line":13,"column":6,"nodeType":"65","endLine":13,"endColumn":8,"suggestions":"68"},{"ruleId":"59","severity":1,"message":"60","line":5,"column":24,"nodeType":"61","messageId":"62","endLine":5,"endColumn":28},"no-native-reassign",["69"],"no-negated-in-lhs",["70"],"no-unused-vars","'Auth' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchPosts'. Either include it or remove the dependency array.","ArrayExpression",["71"],"React Hook useEffect has a missing dependency: 'fetchPost'. Either include it or remove the dependency array.",["72"],"no-global-assign","no-unsafe-negation",{"desc":"73","fix":"74"},{"desc":"75","fix":"76"},"Update the dependencies array to be: [fetchPosts]",{"range":"77","text":"78"},"Update the dependencies array to be: [fetchPost]",{"range":"79","text":"80"},[751,753],"[fetchPosts]",[417,419],"[fetchPost]"]